const e=(e="v-line-clamp-value",t="v-dot-padding")=>{const n=e=>{const n=e.scrollHeight,i=e.getBoundingClientRect().height,l=parseFloat(e.getAttribute(t)||"none")||0;n>i&&e.insertAdjacentHTML("afterbegin",`\n                <span style="\n                    float: right;\n                    height: ${l}px;\n                    display: block;\n                "></span>\n                <span style="\n                    float: right;\n                    clear: both;\n                ">...</span>\n            `)};const i="webkitLineClamp"in document.body.style?void 0:function(e,i,l){const o=getComputedStyle(e).lineHeight.replace("px","");let a=parseFloat(o);if(i.lineHeight){const t=parseInt(i.lineHeight||"none");isNaN(t)?console.warn("line-height argument for vue-line-clamp must be a number (of pixels)"):(a=t,e.style.lineHeight=a+"px")}const s=a*l;e.style.maxHeight=s?s+"px":"",e.setAttribute(t,""+(s-a)),requestAnimationFrame((()=>{n(e)}))};return{addInitStyle:e=>{e.style.cssText+="\n            display: block;\n            display: -webkit-box;\n            -webkit-box-orient: vertical;\n            overflow: hidden;\n            word-break: break-all;\n            text-overflow: ellipsis;\n        "},truncateText:(t,l)=>{const o=parseInt(l.lineCount),a=parseInt(t.getAttribute(e)||"none");if(!isNaN(o))return o!==a?(t.setAttribute(e,`${o}`),void(i?i(t,l,o):t.style.webkitLineClamp=o?`${o}`:"")):void(i&&n(t));console.error("Parameter for vue-line-clamp must be a number")}}};export{e as lineClamp};
