const e=(e="v-line-clamp-value",t="v-dot-padding")=>{const n=e=>{const n=e.scrollHeight,o=e.getBoundingClientRect().height,r=parseFloat(e.getAttribute(t)||"none")||0;n>o&&e.insertAdjacentHTML("afterbegin",`\n                <span style="\n                    float: right;\n                    height: ${r}px;\n                    display: block;\n                "></span>\n                <span style="\n                    float: right;\n                    clear: both;\n                ">...</span>\n            `)};const o="webkitLineClamp"in document.body.style?void 0:function(e,o,r){const i=getComputedStyle(e).lineHeight.replace("px","");let s=parseFloat(i);if(o.lineHeight){const t=parseInt(o.lineHeight||"none");isNaN(t)?console.warn("line-height argument for vue-line-clamp must be a number (of pixels)"):(s=t,e.style.lineHeight=s+"px")}const a=s*r;e.style.maxHeight=a?a+"px":"",e.setAttribute(t,""+(a-s)),requestAnimationFrame((()=>{n(e)}))};return{addInitStyle:e=>{e.style.cssText+="\n            display: block;\n            display: -webkit-box;\n            -webkit-box-orient: vertical;\n            overflow: hidden;\n            word-break: break-all;\n            text-overflow: ellipsis;\n        "},truncateText:(t,r)=>{const i=parseInt(r.lineCount),s=parseInt(t.getAttribute(e)||"none");if(!isNaN(i))return i!==s?(t.setAttribute(e,`${i}`),void(o?o(t,r,i):t.style.webkitLineClamp=i?`${i}`:"")):void(o&&n(t));console.error("Parameter for vue-line-clamp must be a number")}}};function t(e){const t=e.lazyAttr||"lazy",n=e.loadType||"src",o=e.loadingPath||"",r=new Map;let i;function s(o){switch(n){case"src":!function(n){const o=n.src;n.src=n.getAttribute(t)||"",n.onerror=function(){n.src=e.errorPath||o}}(o);break;case"background":o.style.backgroundImage=`url(${o.getAttribute(t)})`}o.removeAttribute(t)}function a(e){return window.scrollY+window.innerHeight>e.offsetTop}function l(e){const t=function(e,t){let n,o;return function(...r){const i=Date.now(),s=this;if(o||(o=i),clearTimeout(n),i-o>t)return o=i,e.apply(s,r),void clearTimeout(n);n=window.setTimeout((function(){o=Date.now(),n=0,e.apply(s,r)}),t)}}(function(e){return()=>{a(e)&&(s(e),c(e))}}(e),500);r.set(e,t),window.addEventListener("scroll",t)}function c(e){r.has(e)&&(window.removeEventListener("scroll",r.get(e)),r.delete(e))}return IntersectionObserver&&(i=new IntersectionObserver((e=>{for(let t=0;t<e.length;t++){const n=e[t];if(n.isIntersecting){const e=n.target;s(e),i.unobserve(e)}}}))),function(){const e=document.querySelectorAll(`[${t}]`);for(let t=0;t<e.length;t++){const n=e[t];i?i.observe(n):l(n)}}(),{bindLazyLoad:function(e,r){switch(n){case"src":e.src=o;break;case"background":e.style.backgroundImage=`url(${o})`}e.setAttribute(t,r.imageUrl),i?i.observe(e):a(e)?s(e):l(e)},unBindLazyLoad:function(e){i?i.unobserve(e):c(e)}}}export{t as lazyLoad,e as lineClamp};
