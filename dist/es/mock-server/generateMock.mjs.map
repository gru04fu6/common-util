{"version":3,"file":"generateMock.mjs","sources":["../../../packages/mock-server/generateMock.ts"],"sourcesContent":["\nimport fs from 'fs';\nimport path from 'path';\nimport { resolveMockApiConfig } from './mockApiConfig';\n\nconst walk = (dir, done) => {\n    let results: string[] = [];\n    fs.readdir(dir, (err, list) => {\n        if (err) return done(err);\n        let pending = list.length;\n        if (!pending) return done(null, results);\n        list.forEach(_file => {\n            const file = path.resolve(dir, _file);\n            fs.stat(file, (_, stat) => {\n                if (stat && stat.isDirectory()) {\n                    walk(file, (__, res) => {\n                        results = results.concat(res);\n                        pending -= 1;\n                        if (!pending) done(null, results);\n                    });\n                } else {\n                    results.push(file);\n                    pending -= 1;\n                    if (!pending) done(null, results);\n                }\n            });\n        });\n        return null;\n    });\n};\n\nfunction toCamelCase(str) {\n    return str\n        .replace(/[-/]/g, ' ')\n        .replace(/\\s(.)/g, $1 => $1.toUpperCase())\n        .replace(/_(.)/g, $1 => $1.toUpperCase())\n        .replace(/\\s/g, '');\n}\n\nfunction toUpperCamelCase(str) {\n    return toCamelCase(str)\n        .replace(/^(.)/, $1 => $1.toUpperCase());\n}\n\nfunction toLowerCamelCase(str) {\n    return toCamelCase(str)\n        .replace(/^(.)/, $1 => $1.toLowerCase());\n}\n\nconst warningText = `// ----------------------------------------------------------------------------------\n// ----------------------------------------------------------------------------------\n//                           這個檔案是自動產生的，不要修改它\n// ----------------------------------------------------------------------------------\n// ----------------------------------------------------------------------------------\\n`;\n\nfunction loadConfig() {\n    return resolveMockApiConfig({\n        mockSrcPath: '',\n        generatePath: '',\n        realApiConfigPath: '',\n        changeTypeName: {}\n    });\n}\n\n// eslint-disable-next-line import/prefer-default-export\nexport async function generateMock() {\n    const mockApiConfig = await loadConfig();\n    const { mockSrcPath, generatePath, realApiConfigPath } = mockApiConfig;\n\n    walk(mockSrcPath, (err, results) => {\n        if (err) throw err;\n\n        let typeText = warningText;\n        let mockText = warningText;\n        let mockImportText = '';\n        let mockRouteText = '';\n        let apiConfig = fs.readFileSync(realApiConfigPath, 'utf-8');\n\n        results.sort((a, b) => {\n            if (a < b) return -1;\n            if (a > b) return 1;\n            return 0;\n        });\n\n        results.forEach(p => {\n            const filePath = p.replace(/\\.ts$/, '');\n            const apiPath = path.relative(mockSrcPath, filePath);\n            const registerApiPath = `/${apiPath}`;\n            const formatName = mockApiConfig.changeTypeName![registerApiPath] ? mockApiConfig.changeTypeName![registerApiPath] : apiPath.replace(/api\\//, '');\n\n            const typePath = path.relative(generatePath, filePath);\n            const typeName = toUpperCamelCase(formatName);\n            typeText += `export * as ${typeName} from '${typePath}';\\n`;\n\n            const mockPath = path.relative(generatePath, filePath);\n            const mockName = toLowerCamelCase(formatName);\n            mockImportText += `import ${mockName} from '${mockPath}';\\n`;\n\n            const registerMethod: string[] = [];\n\n            let tempApiConfig = apiConfig;\n            let apiRegexp = new RegExp(`'${registerApiPath}'`, 'g');\n            let methodRegexp = new RegExp('method:.*?\\'(.*?)\\'', 'g');\n\n            while(apiRegexp.exec(tempApiConfig)) {\n                tempApiConfig = tempApiConfig.slice(apiRegexp.lastIndex);\n\n                if (methodRegexp.exec(tempApiConfig)) {\n                    registerMethod.push(RegExp.$1);\n                }\n\n                methodRegexp.exec('');\n                apiRegexp.exec('');\n            }\n\n            if (!registerMethod.length) {\n                registerMethod.push('get');\n            }\n\n            registerMethod.forEach(method => {\n                const handlerName = registerMethod.length > 1 ? `${mockName}.${method}Handler` : mockName;\n                const methodText = method === 'get' ? '' : `, method: '${method}' as const`;\n\n                mockRouteText += `    { path: '${registerApiPath}', reqHandler: ${handlerName}${methodText} },\\n`;\n            });\n        });\n        mockRouteText = mockRouteText.replace(/,(\\n)$/, '$1');\n        mockRouteText = `\\nconst mockObject = [\\n${mockRouteText}];\\nexport default mockObject;\\n`;\n\n        typeText += 'export as namespace ApiDataModel;\\n';\n        mockText += `${mockImportText}${mockRouteText}`;\n\n        typeText += warningText;\n        mockText += warningText;\n\n        if (!fs.existsSync(generatePath)) {\n            fs.mkdirSync(generatePath, { recursive: true });\n        }\n\n        fs.writeFileSync(`${generatePath}/apiDataModel.d.ts`, typeText);\n        fs.writeFileSync(`${generatePath}/mockRoute.ts`, mockText);\n    });\n}\n"],"names":[],"mappings":"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"}