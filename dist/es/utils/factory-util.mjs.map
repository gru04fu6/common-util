{"version":3,"file":"factory-util.mjs","sources":["../../../packages/utils/factory-util.ts"],"sourcesContent":["\n/**\n * 節流\n * @param  {Function} fn    實際執行的函式\n * @param  {Number}   delay 節流時間(ms)，即在這段時間內不管執行幾次包裝後函式，實際的函式都僅會執行一次\n * @return {Function}       包裝後的函式\n */\nexport function throttle(fn: (...args: any[]) => void, delay: number) {\n    let timer: number;\n    let prevTime: number;\n\n    return function (this: any, ...args: any[]) {\n        const currTime = Date.now();\n        const context = this;\n\n        if (prevTime && currTime < prevTime + delay) {\n            if (!timer) {\n                timer = window.setTimeout(function () {\n                    prevTime = Date.now();\n                    timer = 0;\n                    fn.apply(context, args);\n                }, prevTime + delay - currTime);\n            }\n            return;\n        }\n\n        prevTime = currTime;\n        fn.apply(context, args);\n    };\n}\n\n/**\n * 防抖\n * @param  {Function} fn   實際執行的函式\n * @param  {Number}   wait 防抖時間(ms)，即在這段時間內沒有再次執行包裝後函式的話，實際的函式才會執行\n * @return {Function}      包裝後的函式\n */\nexport function debounce(this: any, fn: (...args: any[]) => void, wait: number) {\n    const context = this;\n    let timeout: number | undefined;\n\n    return function(...args: any[]) {\n        clearTimeout(timeout);\n        timeout = window.setTimeout(function () {\n            timeout = undefined;\n            fn.apply(context, args);\n        }, wait);\n    };\n}\n\n/**\n * 將Promise物件重新包裝，回傳一個新的Promise，使其不管成功失敗都會回傳一個物件\n * 並利用物件的status來判斷結果\n * @param  {Promise} promiseObject Promise物件\n * @return {Promise} 重新包裝後的Promise，不管成功或失敗都會resolve一個物件\n */\nexport function toAsync<T>(promiseObject: Promise<T>): Promise<{\n    status: boolean,\n    response?: T,\n    error?: any\n}> {\n    return new Promise(resolve => {\n        promiseObject\n            .then((res: T) => {\n                resolve({\n                    status: true,\n                    response: res\n                });\n            })\n            .catch((e: any) => {\n                resolve({\n                    status: false,\n                    error: e\n                });\n            });\n    });\n}"],"names":[],"mappings":"kBAOyB,IAA8B,OAAe;AAClE,MAAI;AACJ,MAAI;AAEJ,SAAO,YAAwB,MAAa;AACxC,UAAM,WAAW,KAAK;AACtB,UAAM,UAAU;AAEhB,QAAI,YAAY,WAAW,WAAW,OAAO;AACzC,UAAI,CAAC,OAAO;AACR,gBAAQ,OAAO,WAAW,WAAY;AAClC,qBAAW,KAAK;AAChB,kBAAQ;AACR,aAAG,MAAM,SAAS;AAAA,WACnB,WAAW,QAAQ;AAAA;AAE1B;AAAA;AAGJ,eAAW;AACX,OAAG,MAAM,SAAS;AAAA;AAAA;kBAUU,IAA8B,MAAc;AAC5E,QAAM,UAAU;AAChB,MAAI;AAEJ,SAAO,YAAY,MAAa;AAC5B,iBAAa;AACb,cAAU,OAAO,WAAW,WAAY;AACpC,gBAAU;AACV,SAAG,MAAM,SAAS;AAAA,OACnB;AAAA;AAAA;iBAUgB,eAIxB;AACC,SAAO,IAAI,QAAQ,aAAW;AAC1B,kBACK,KAAK,CAAC,QAAW;AACd,cAAQ;AAAA,QACJ,QAAQ;AAAA,QACR,UAAU;AAAA;AAAA,OAGjB,MAAM,CAAC,MAAW;AACf,cAAQ;AAAA,QACJ,QAAQ;AAAA,QACR,OAAO;AAAA;AAAA;AAAA;AAAA;;;;"}