{"version":3,"file":"time-util.js","sources":["../../../packages/utils/time-util.ts"],"sourcesContent":["/**\n * 若是小於10則補0\n * @param {String} date 字串\n * @return {String} 字串\n */\nfunction timePreFix(date: string | number) {\n    if (+date < 10) {\n        return `0${date}`;\n    }\n    return `${date}`;\n}\n\nfunction formatFunc(timeObj: Date, format: String, UTC = false) {\n    const year = UTC ? timeObj.getUTCFullYear(): timeObj.getFullYear() ;\n    const month = (UTC ? timeObj.getUTCMonth(): timeObj.getMonth()) + 1;\n    const day = UTC ? timeObj.getUTCDate(): timeObj.getDate();\n    const hour = UTC ? timeObj.getUTCHours(): timeObj.getHours();\n    const minute = UTC ? timeObj.getUTCMinutes(): timeObj.getMinutes();\n    const second = UTC ? timeObj.getUTCSeconds(): timeObj.getSeconds();\n\n    return format.replace(/(YYYY|MM|DD|HH|mm|ss)/g, match => {\n        switch (match) {\n            case 'YYYY':\n                return `${year}`;\n            case 'MM':\n                return timePreFix(month);\n            case 'DD':\n                return timePreFix(day);\n            case 'HH':\n                return timePreFix(hour);\n            case 'mm':\n                return timePreFix(minute);\n            case 'ss':\n                return timePreFix(second);\n            default:\n                return match;\n        }\n    });\n}\n\n/**\n * 格式化日期(本地時間) 2017-05-05 - 07:07:07\n * @param {Object} timeObj 時間物件\n * @param {Boolean} format 格式化方式 目前僅支援 YYYY(年)、MM(月)、DD(日)、HH(時)、mm(分)、ss(秒) `default: 'YYYY-MM-DD HH:mm:ss'`\n * @return {String} 時間字串\n */\nexport function formatTime(timeObj: Date, format = 'YYYY-MM-DD HH:mm:ss') {\n    return formatFunc(timeObj, format);\n}\n\n/**\n * 格式化日期(0時區時間) 2017-05-05 - 07:07:07\n * @param {Object} timeObj 時間物件\n * @param {Boolean} format 格式化方式 目前僅支援 YYYY(年)、MM(月)、DD(日)、HH(時)、mm(分)、ss(秒) `default: 'YYYY-MM-DD HH:mm:ss'`\n * @return {String} 時間字串\n */\nexport function formatUTCTime(timeObj: Date, format = 'YYYY-MM-DD HH:mm:ss') {\n    return formatFunc(timeObj, format, true);\n}\n\nfunction translateFunction(timeZone: number, timeString = '', localToZone = false) {\n    let transTime = timeString ? new Date(timeString) : new Date();\n    let base = localToZone ? 1 : -1;\n\n    if (Number.isNaN(transTime.getTime())) {\n        transTime = new Date();\n    }\n    // eslint-disable-next-line\n    const GMTTime = transTime.getTime() + ((transTime.getTimezoneOffset() * 60000) * base);\n    return GMTTime + ((timeZone * 3600000) * base);\n}\n\n/**\n * 把本地時間轉換為其他時區時間\n * @param {Number} timeZone 要轉過去的時區\n * @param {String} timeString 時間字串\n * @return {Number} 時間戳 此時間戳顯示出來的本地時間就是轉過去的時區時間\n */\nexport function localTimeToZone(timeZone: number, timeString = '') {\n    return translateFunction(timeZone, timeString, true);\n}\n\n/**\n * 把其他時區時間轉換為本地時區\n * @param {Number} timeZone timeString的時區\n * @param {String} timeString 時間字串\n * @return {Number} 時間戳 此時間戳顯示出來的就是時間字串對應的本地時間\n */\nexport function zoneTimeToLocal(timeZone: number, timeString = '') {\n    return translateFunction(timeZone, timeString);\n}\n\n/**\n * 判斷時間大小並交換位置\n * @param  {String}    startDate 時間字串1\n * @param  {String}    endDate   時間字串2\n * @return {Array<String>}       時間字串陣列\n */\nexport function checkDate(startDate: string, endDate: string) {\n    const startTimestamp = Date.parse(startDate.replace(/-/g, '/'));\n    const endTimestamp = Date.parse(endDate.replace(/-/g, '/'));\n    // 如果開始時間大於結束時間, 就把時間調換\n    if (startTimestamp > endTimestamp) {\n        return [endDate, startDate];\n    }\n    return [startDate, endDate];\n}"],"names":[],"mappings":";;;;AAKA,oBAAoB,MAAuB;AACvC,MAAI,CAAC,OAAO,IAAI;AACZ,WAAO,IAAI;AAAA;AAEf,SAAO,GAAG;AAAA;AAGd,oBAAoB,SAAe,QAAgB,MAAM,OAAO;AAC5D,QAAM,OAAO,MAAM,QAAQ,mBAAkB,QAAQ;AACrD,QAAM,QAAS,OAAM,QAAQ,gBAAe,QAAQ,cAAc;AAClE,QAAM,MAAM,MAAM,QAAQ,eAAc,QAAQ;AAChD,QAAM,OAAO,MAAM,QAAQ,gBAAe,QAAQ;AAClD,QAAM,SAAS,MAAM,QAAQ,kBAAiB,QAAQ;AACtD,QAAM,SAAS,MAAM,QAAQ,kBAAiB,QAAQ;AAEtD,SAAO,OAAO,QAAQ,0BAA0B,WAAS;AACrD,YAAQ;AAAA,WACC;AACD,eAAO,GAAG;AAAA,WACT;AACD,eAAO,WAAW;AAAA,WACjB;AACD,eAAO,WAAW;AAAA,WACjB;AACD,eAAO,WAAW;AAAA,WACjB;AACD,eAAO,WAAW;AAAA,WACjB;AACD,eAAO,WAAW;AAAA;AAElB,eAAO;AAAA;AAAA;AAAA;oBAWI,SAAe,SAAS,uBAAuB;AACtE,SAAO,WAAW,SAAS;AAAA;uBASD,SAAe,SAAS,uBAAuB;AACzE,SAAO,WAAW,SAAS,QAAQ;AAAA;AAGvC,2BAA2B,UAAkB,aAAa,IAAI,cAAc,OAAO;AAC/E,MAAI,YAAY,aAAa,IAAI,KAAK,cAAc,IAAI;AACxD,MAAI,OAAO,cAAc,IAAI;AAE7B,MAAI,OAAO,MAAM,UAAU,YAAY;AACnC,gBAAY,IAAI;AAAA;AAGpB,QAAM,UAAU,UAAU,YAAc,UAAU,sBAAsB,MAAS;AACjF,SAAO,UAAY,WAAW,OAAW;AAAA;yBASb,UAAkB,aAAa,IAAI;AAC/D,SAAO,kBAAkB,UAAU,YAAY;AAAA;yBASnB,UAAkB,aAAa,IAAI;AAC/D,SAAO,kBAAkB,UAAU;AAAA;mBASb,WAAmB,SAAiB;AAC1D,QAAM,iBAAiB,KAAK,MAAM,UAAU,QAAQ,MAAM;AAC1D,QAAM,eAAe,KAAK,MAAM,QAAQ,QAAQ,MAAM;AAEtD,MAAI,iBAAiB,cAAc;AAC/B,WAAO,CAAC,SAAS;AAAA;AAErB,SAAO,CAAC,WAAW;AAAA;;;;;;;;"}