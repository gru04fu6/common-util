{"version":3,"file":"cli.js","sources":["../../../packages/mock-server/cli.ts"],"sourcesContent":["import express from 'express';\nimport { Server } from 'http';\nimport bodyParser from 'body-parser';\nimport chokidar from 'chokidar';\nimport path from 'path';\n\nimport { resolveMockServerConfig, MockServerUserConfig }  from './mockServerConfig';\nimport registerRouterFactory  from './registerRouter';\n\nlet server: Server;\nlet lock = false;\n\nfunction loadConfig() {\n    return resolveMockServerConfig({\n        port: 3000\n    });\n}\n\nfunction startWatch(watchFolder = './mock') {\n    const configRoot = process.cwd();\n    let rootFolder = path.resolve(configRoot, watchFolder);\n\n    const watcher = chokidar.watch([\n        path.resolve(configRoot, 'mock-server.config.js'),\n        path.resolve(configRoot, 'mock-server.config.ts'),\n        rootFolder\n    ], {\n        persistent: true,\n        ignoreInitial: true\n    });\n\n    console.log(`watch file on folder: ${rootFolder}`);\n\n    watcher.on('ready', function() {\n        watcher.on('all', function() {\n            if (!lock) {\n                console.log('restart mock server');\n                lock = true;\n\n                server.close(async () => {\n                    const config = await loadConfig();\n\n                    await startApp(config);\n                    lock = false;\n                });\n            }\n        });\n    });\n}\n\nfunction startApp(config: MockServerUserConfig) {\n    return new Promise<void>(resolve => {\n        const MockServer = express();\n\n        MockServer.set('port', config.port);\n        MockServer.use((_, res, next) => {\n            res.header('Access-Control-Allow-Origin', '*');\n            res.header('Access-Control-Allow-Headers', '*');\n            res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, PATCH, HEAD, OPTIONS');\n            res.set('Connection', 'close');\n            next();\n        });\n\n        MockServer.use(bodyParser.urlencoded({\n            extended: true,\n            parameterLimit: 10000,\n            limit: 1024 * 1024 * 10\n        }));\n        MockServer.use(bodyParser.json());\n\n        if (config.settingServer) {\n            config.settingServer(MockServer);\n        }\n\n        const routes = express.Router();\n\n        if (config.registerRouter) {\n            config.registerRouter(registerRouterFactory(routes));\n        } else {\n            routes.get('/example', (_, res, next) => setTimeout(() => {\n                res.json({ data: 'example data' });\n                next();\n            }, 200));\n        }\n\n        MockServer.use('/', function(req, res, next) {\n            routes(req, res, next);\n        });\n\n        server = MockServer.listen(config.port, () => {\n            console.log(`Mock server is running at http://localhost:${config.port}`);\n            resolve();\n        });\n    });\n}\n\n// eslint-disable-next-line import/prefer-default-export\nexport async function cli() {\n    const config = await loadConfig();\n\n    await startApp(config);\n    startWatch(config.watchDir);\n}\n"],"names":["resolveMockServerConfig","path","chokidar","express","bodyParser","registerRouterFactory"],"mappings":";;;;;;;;;;;;;;;;;;AASA,IAAI;AACJ,IAAI,OAAO;AAEX,sBAAsB;AAClB,SAAOA,yCAAwB;AAAA,IAC3B,MAAM;AAAA;AAAA;AAId,oBAAoB,cAAc,UAAU;AACxC,QAAM,aAAa,QAAQ;AAC3B,MAAI,aAAaC,yBAAK,QAAQ,YAAY;AAE1C,QAAM,UAAUC,6BAAS,MAAM;AAAA,IAC3BD,yBAAK,QAAQ,YAAY;AAAA,IACzBA,yBAAK,QAAQ,YAAY;AAAA,IACzB;AAAA,KACD;AAAA,IACC,YAAY;AAAA,IACZ,eAAe;AAAA;AAGnB,UAAQ,IAAI,yBAAyB;AAErC,UAAQ,GAAG,SAAS,WAAW;AAC3B,YAAQ,GAAG,OAAO,WAAW;AACzB,UAAI,CAAC,MAAM;AACP,gBAAQ,IAAI;AACZ,eAAO;AAEP,eAAO,MAAM,YAAY;AACrB,gBAAM,SAAS,MAAM;AAErB,gBAAM,SAAS;AACf,iBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAO3B,kBAAkB,QAA8B;AAC5C,SAAO,IAAI,QAAc,aAAW;AAChC,UAAM,aAAaE;AAEnB,eAAW,IAAI,QAAQ,OAAO;AAC9B,eAAW,IAAI,CAAC,GAAG,KAAK,SAAS;AAC7B,UAAI,OAAO,+BAA+B;AAC1C,UAAI,OAAO,gCAAgC;AAC3C,UAAI,OAAO,gCAAgC;AAC3C,UAAI,IAAI,cAAc;AACtB;AAAA;AAGJ,eAAW,IAAIC,+BAAW,WAAW;AAAA,MACjC,UAAU;AAAA,MACV,gBAAgB;AAAA,MAChB,OAAO,OAAO,OAAO;AAAA;AAEzB,eAAW,IAAIA,+BAAW;AAE1B,QAAI,OAAO,eAAe;AACtB,aAAO,cAAc;AAAA;AAGzB,UAAM,SAASD,4BAAQ;AAEvB,QAAI,OAAO,gBAAgB;AACvB,aAAO,eAAeE,0BAAsB;AAAA,WACzC;AACH,aAAO,IAAI,YAAY,CAAC,GAAG,KAAK,SAAS,WAAW,MAAM;AACtD,YAAI,KAAK,EAAE,MAAM;AACjB;AAAA,SACD;AAAA;AAGP,eAAW,IAAI,KAAK,SAAS,KAAK,KAAK,MAAM;AACzC,aAAO,KAAK,KAAK;AAAA;AAGrB,aAAS,WAAW,OAAO,OAAO,MAAM,MAAM;AAC1C,cAAQ,IAAI,8CAA8C,OAAO;AACjE;AAAA;AAAA;AAAA;qBAMgB;AACxB,QAAM,SAAS,MAAM;AAErB,QAAM,SAAS;AACf,aAAW,OAAO;AAAA;;;;"}